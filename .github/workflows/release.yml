name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}

      - name: Setup Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Check Bun version and targets
        run: |
          source ~/.bashrc
          bun --version
          echo "Checking available compile targets..."
          bun build --help | grep -i target || true

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun run test

      - name: Type check
        run: bun run typecheck

      - name: Build binaries
        run: |
          mkdir -p dist
          
          echo "Building Linux binaries..."
          
          # Linux x64 - most reliable target
          echo "Building Linux x64..."
          bun build --compile --minify ./src/cli.tsx --outfile dist/pingu-linux-amd64
          
          # Try Linux ARM64 if supported
          echo "Attempting Linux ARM64..."
          if bun build --compile --minify --target=bun-linux-arm64 ./src/cli.tsx --outfile dist/pingu-linux-arm64 2>/dev/null; then
            echo "✅ Linux ARM64 build successful"
          elif bun build --compile --minify ./src/cli.tsx --outfile dist/pingu-linux-arm64 2>/dev/null; then
            echo "✅ Linux ARM64 build successful (without target flag)"
          else
            echo "❌ Linux ARM64 build failed, skipping"
          fi
          
          # Make binaries executable
          chmod +x dist/pingu-* 2>/dev/null || true

      - name: Verify binaries
        run: |
          echo "Built binaries:"
          ls -la dist/
          echo ""
          
          for binary in dist/pingu-*; do
            if [ -f "$binary" ]; then
              echo "Verifying $binary:"
              file "$binary" || true
              size=$(stat -f%z "$binary" 2>/dev/null || stat -c%s "$binary" 2>/dev/null || echo "unknown")
              echo "Size: $size bytes"
              echo "---"
            fi
          done

      - name: Generate checksums
        run: |
          cd dist
          if ls pingu-* >/dev/null 2>&1; then
            sha256sum pingu-* > checksums.txt
            echo "Generated checksums:"
            cat checksums.txt
          else
            echo "No binaries found to checksum"
            exit 1
          fi

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 Pingu ${{ steps.version.outputs.VERSION }}
          
          A modern ping utility with beautiful CLI output and comprehensive network analysis.
          
          ### 📦 Installation
          
          **Linux x86_64:**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pingu-linux-amd64 -o pingu
          chmod +x pingu && sudo mv pingu /usr/local/bin/
          ```
          
          **Linux ARM64:**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pingu-linux-arm64 -o pingu
          chmod +x pingu && sudo mv pingu /usr/local/bin/
          ```
          
          ### ✨ Features
          
          - 🎨 Beautiful terminal UI with brighter colors and responsive design
          - 📊 Real-time network monitoring and analysis  
          - 🔍 Comprehensive quality metrics and performance scoring
          - 📱 Adaptive layouts for different terminal sizes
          - 🌐 Improved error handling (continues on network errors)
          - 📁 Export functionality for detailed analysis
          - ⚡ Single binary with no dependencies
          - 🎯 Fixed column alignment and removed duplicate information
          
          ### 🐧 Usage
          
          ```bash
          # Basic ping
          pingu google.com
          
          # Ping with options
          pingu -c 10 --interval 2 --export 8.8.8.8
          
          # Enable line chart visualization
          pingu --chart --count 20 google.com
          
          # Control display count
          pingu --display 5 --count 50 1.1.1.1
          ```
          
          ### 📋 Available Options
          
          - `-c, --count <NUMBER>`: Number of ping packets to send
          - `-i, --interval <SECONDS>`: Interval between pings
          - `-t, --timeout <SECONDS>`: Timeout for each ping
          - `-s, --size <BYTES>`: Packet size
          - `--export`: Export results to JSON file
          - `--chart`: Enable line chart visualization
          - `--display <NUMBER>`: Number of recent pings to display
          
          ### 🔧 Recent Improvements
          
          - **Enhanced usePing hook**: Extracted ping logic into reusable React hook
          - **Brighter color scheme**: Updated gradients and colors for better visibility
          - **Fixed column alignment**: Consistent spacing with min/max widths
          - **Removed duplicates**: Cleaned up redundant success/error rate information
          - **Better error handling**: Network errors no longer stop the ping process
          - **Improved stability calculation**: Multi-factor network stability assessment
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.0.0...${{ steps.version.outputs.VERSION }}
          EOF

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Create Release
        run: |
          if ls dist/pingu-* >/dev/null 2>&1; then
            echo "Creating release with binaries:"
            ls -la dist/
            
            gh release create "${{ steps.version.outputs.VERSION }}" \
              --title "Pingu ${{ steps.version.outputs.VERSION }}" \
              --notes-file release_notes.md \
              --repo ${{ github.repository }} \
              dist/pingu-* dist/checksums.txt
              
            echo "✅ Release created successfully"
          else
            echo "❌ No binaries found to release"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully created release **${{ steps.version.outputs.VERSION }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Built Binaries:" >> $GITHUB_STEP_SUMMARY
          for binary in dist/pingu-*; do
            if [ -f "$binary" ] && [[ ! "$binary" == *.txt ]]; then
              size=$(stat -f%z "$binary" 2>/dev/null || stat -c%s "$binary" 2>/dev/null || echo "unknown")
              echo "- \`$(basename "$binary")\` (${size} bytes)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Download:" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.VERSION }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Latest Release](https://github.com/${{ github.repository }}/releases/latest)" >> $GITHUB_STEP_SUMMARY