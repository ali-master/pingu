name: Release

on:
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}

      - name: Setup Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Check Bun version and targets
        run: |
          source ~/.bashrc
          bun --version
          echo "Checking available compile targets..."
          bun build --help | grep -i target || true

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun run test

      - name: Type check
        run: bun run typecheck

      - name: Build binaries
        run: |
          mkdir -p dist
          
          echo "Building cross-platform binaries..."
          
          # Linux x64 - most reliable target
          echo "Building Linux x64..."
          bun build --compile --minify ./src/cli.tsx --outfile dist/pingu-linux-amd64
          
          # Linux ARM64
          echo "Building Linux ARM64..."
          if bun build --compile --minify --target=bun-linux-arm64 ./src/cli.tsx --outfile dist/pingu-linux-arm64 2>/dev/null; then
            echo "✅ Linux ARM64 build successful"
          else
            echo "❌ Linux ARM64 build failed, skipping"
          fi
          
          # macOS x64 (Intel)
          echo "Building macOS x64..."
          if bun build --compile --minify --target=bun-darwin-x64 ./src/cli.tsx --outfile dist/pingu-macos-amd64 2>/dev/null; then
            echo "✅ macOS x64 build successful"
          else
            echo "❌ macOS x64 build failed, skipping"
          fi
          
          # macOS ARM64 (Apple Silicon)
          echo "Building macOS ARM64..."
          if bun build --compile --minify --target=bun-darwin-arm64 ./src/cli.tsx --outfile dist/pingu-macos-arm64 2>/dev/null; then
            echo "✅ macOS ARM64 build successful"
          else
            echo "❌ macOS ARM64 build failed, skipping"
          fi
          
          # Windows x64
          echo "Building Windows x64..."
          if bun build --compile --minify --target=bun-windows-x64 ./src/cli.tsx --outfile dist/pingu-windows-amd64.exe 2>/dev/null; then
            echo "✅ Windows x64 build successful"
          else
            echo "❌ Windows x64 build failed, skipping"
          fi
          
          # Skip Windows ARM64 as it's not supported by Bun yet
          echo "⏭️ Skipping Windows ARM64 (not supported by Bun)"
          
          # Make binaries executable (Unix-like systems)
          chmod +x dist/pingu-* 2>/dev/null || true

      - name: Verify binaries
        run: |
          echo "Built binaries:"
          ls -la dist/
          echo ""
          
          for binary in dist/pingu-*; do
            if [ -f "$binary" ]; then
              echo "Verifying $binary:"
              file "$binary" || true
              size=$(stat -f%z "$binary" 2>/dev/null || stat -c%s "$binary" 2>/dev/null || echo "unknown")
              echo "Size: $size bytes"
              echo "---"
            fi
          done

      - name: Generate checksums
        run: |
          cd dist
          if ls pingu-* >/dev/null 2>&1; then
            sha256sum pingu-* > checksums.txt
            echo "Generated checksums:"
            cat checksums.txt
          else
            echo "No binaries found to checksum"
            exit 1
          fi

      - name: Generate Changelog
        run: |
          # Handle version extraction for both tag and manual triggers
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            # Extract version from tag
            VERSION="${GITHUB_REF#refs/tags/}"
            echo "Running on tag: $VERSION"
          else
            # For manual triggers, get the latest tag or create a version based on commit
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LATEST_TAG" ]; then
              # Increment patch version for manual release
              VERSION="${LATEST_TAG%.*}.$((${LATEST_TAG##*.} + 1))"
              echo "Manual trigger: incrementing from $LATEST_TAG to $VERSION"
            else
              # No tags exist, start with v1.0.0
              VERSION="v1.0.0"
              echo "No previous tags found, using initial version: $VERSION"
            fi
          fi
          
          echo "Generating changelog for version: $VERSION"
          
          # Get previous tag for changelog comparison
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Comparing with previous tag: $PREVIOUS_TAG"
            CHANGELOG_RANGE="$PREVIOUS_TAG..HEAD"
          else
            echo "No previous tag found, using all commits"
            CHANGELOG_RANGE="HEAD"
          fi
          
          # Generate changelog from git commits
          echo "## 🚀 Pingu $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "A modern ping utility with beautiful CLI output and comprehensive network analysis." >> release_notes.md
          echo "" >> release_notes.md
          
          # Add What's Changed section
          echo "### 🔄 What's Changed" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since last tag with better formatting
          git log $CHANGELOG_RANGE --pretty=format:"- %s" --reverse >> release_notes.md || echo "- Initial release" >> release_notes.md
          echo "" >> release_notes.md
          echo "" >> release_notes.md
          
          # Add installation instructions
          cat >> release_notes.md << 'INSTALL_EOF'
          ### 📦 Installation
          
          **One-line installer (recommended):**
          ```bash
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install.sh | sh
          ```
          
          **Manual Downloads:**
          
          **Linux x86_64:**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/VERSION_PLACEHOLDER/pingu-linux-amd64 -o pingu
          chmod +x pingu && sudo mv pingu /usr/local/bin/
          ```
          
          **Linux ARM64:**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/VERSION_PLACEHOLDER/pingu-linux-arm64 -o pingu
          chmod +x pingu && sudo mv pingu /usr/local/bin/
          ```
          
          **macOS Intel (x86_64):**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/VERSION_PLACEHOLDER/pingu-macos-amd64 -o pingu
          chmod +x pingu && sudo mv pingu /usr/local/bin/
          ```
          
          **macOS Apple Silicon (ARM64):**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/VERSION_PLACEHOLDER/pingu-macos-arm64 -o pingu
          chmod +x pingu && sudo mv pingu /usr/local/bin/
          ```
          
          **Windows x86_64:**
          ```powershell
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/VERSION_PLACEHOLDER/pingu-windows-amd64.exe" -OutFile "pingu.exe"
          ```
          
          ### ✨ Key Features
          
          - 🎨 Beautiful terminal UI with responsive design and gradient colors
          - 📊 Real-time network monitoring with live charts and animations
          - 🔍 Comprehensive network analysis (jitter, packet loss, quality scoring)
          - 📱 Adaptive layouts for different terminal sizes
          - 🌐 Cross-platform support (Linux, macOS, Windows)
          - 📁 Export results to JSON for further analysis
          - ⚡ Single binary with no runtime dependencies
          - 🎯 Advanced metrics and streak analysis
          
          ### 🐧 Quick Start
          
          ```bash
          # Basic usage
          pingu google.com
          
          # Advanced options
          pingu -c 20 --chart --export 8.8.8.8
          
          # View all options
          pingu --help
          ```
          
          INSTALL_EOF
          
          # Replace VERSION_PLACEHOLDER with actual version (using | as delimiter to avoid issues with / in version)
          sed -i "s|VERSION_PLACEHOLDER|$VERSION|g" release_notes.md
          
          # Add comparison link if we have a previous tag
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "" >> release_notes.md
            echo "---" >> release_notes.md
            echo "" >> release_notes.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION" >> release_notes.md
          else
            echo "" >> release_notes.md
            echo "---" >> release_notes.md
            echo "" >> release_notes.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/$VERSION" >> release_notes.md
          fi
          
          echo "Generated changelog:"
          cat release_notes.md
          
          # Export VERSION for use in subsequent steps
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Create Release
        run: |
          if ls dist/pingu-* >/dev/null 2>&1; then
            echo "Creating release with binaries:"
            ls -la dist/
            
            echo "Using version: $VERSION"
            
            # Create and push tag if this was a manual trigger (not already a tag)
            if [[ "$GITHUB_REF" != refs/tags/* ]]; then
              echo "Creating and pushing tag: $VERSION"
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git tag -a "$VERSION" -m "Release $VERSION"
              git push origin "$VERSION"
            fi
            
            gh release create "$VERSION" \
              --title "Pingu $VERSION" \
              --notes-file release_notes.md \
              --repo ${{ github.repository }} \
              dist/pingu-* dist/checksums.txt
              
            echo "✅ Release created successfully"
          else
            echo "❌ No binaries found to release"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully created release **$VERSION**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Built Binaries:" >> $GITHUB_STEP_SUMMARY
          for binary in dist/pingu-*; do
            if [ -f "$binary" ] && [[ ! "$binary" == *.txt ]]; then
              size=$(stat -f%z "$binary" 2>/dev/null || stat -c%s "$binary" 2>/dev/null || echo "unknown")
              echo "- \`$(basename "$binary")\` (${size} bytes)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Download:" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Page](https://github.com/${{ github.repository }}/releases/tag/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "- [Latest Release](https://github.com/${{ github.repository }}/releases/latest)" >> $GITHUB_STEP_SUMMARY
