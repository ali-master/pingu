name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # macOS builds
          - os: darwin
            arch: amd64
            runner: macos-13
            target: x64-macos
          - os: darwin
            arch: arm64
            runner: macos-14
            target: arm64-macos
          
          # Linux builds
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            target: x64-linux
          - os: linux
            arch: arm64
            runner: ubuntu-latest
            target: arm64-linux
          - os: linux
            arch: arm
            runner: ubuntu-latest
            target: arm-linux
          
          # Windows builds
          - os: windows
            arch: amd64
            runner: windows-latest
            target: x64-windows
          - os: windows
            arch: arm64
            runner: windows-latest
            target: arm64-windows
          
          # OpenBSD builds (cross-compile from Linux)
          - os: openbsd
            arch: amd64
            runner: ubuntu-latest
            target: x64-openbsd
          - os: openbsd
            arch: arm64
            runner: ubuntu-latest
            target: arm64-openbsd

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun run test

      - name: Type check
        run: bun run typecheck

      - name: Build binary
        run: |
          mkdir -p dist
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              bun build --compile --minify --sourcemap --target=bun-windows-arm64 ./src/cli.tsx --outfile dist/pingu-${{ matrix.os }}-${{ matrix.arch }}.exe
            else
              # Use baseline for better compatibility on older Windows systems
              bun build --compile --minify --sourcemap --target=bun-windows-x64-baseline ./src/cli.tsx --outfile dist/pingu-${{ matrix.os }}-${{ matrix.arch }}.exe
            fi
          elif [[ "${{ matrix.os }}" == "darwin" ]]; then
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              bun build --compile --minify --sourcemap --target=bun-darwin-arm64 ./src/cli.tsx --outfile dist/pingu-${{ matrix.os }}-${{ matrix.arch }}
            else
              # Use baseline for better compatibility on older Intel Macs
              bun build --compile --minify --sourcemap --target=bun-darwin-x64-baseline ./src/cli.tsx --outfile dist/pingu-${{ matrix.os }}-${{ matrix.arch }}
            fi
          elif [[ "${{ matrix.os }}" == "linux" ]]; then
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              bun build --compile --minify --sourcemap --target=bun-linux-arm64 ./src/cli.tsx --outfile dist/pingu-${{ matrix.os }}-${{ matrix.arch }}
            elif [[ "${{ matrix.arch }}" == "arm" ]]; then
              # For ARM 32-bit, use arm64 as closest target
              bun build --compile --minify --sourcemap --target=bun-linux-arm64 ./src/cli.tsx --outfile dist/pingu-${{ matrix.os }}-${{ matrix.arch }}
            else
              # Use baseline for better compatibility on older Linux systems
              bun build --compile --minify --sourcemap --target=bun-linux-x64-baseline ./src/cli.tsx --outfile dist/pingu-${{ matrix.os }}-${{ matrix.arch }}
            fi
          elif [[ "${{ matrix.os }}" == "openbsd" ]]; then
            # OpenBSD cross-compilation - use Linux musl builds for better compatibility
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              bun build --compile --minify --sourcemap --target=bun-linux-arm64-musl ./src/cli.tsx --outfile dist/pingu-${{ matrix.os }}-${{ matrix.arch }}
            else
              bun build --compile --minify --sourcemap --target=bun-linux-x64-musl ./src/cli.tsx --outfile dist/pingu-${{ matrix.os }}-${{ matrix.arch }}
            fi
          fi
        shell: bash

      - name: Verify binary
        run: |
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            ls -la dist/pingu-${{ matrix.os }}-${{ matrix.arch }}.exe
            file dist/pingu-${{ matrix.os }}-${{ matrix.arch }}.exe || true
          else
            ls -la dist/pingu-${{ matrix.os }}-${{ matrix.arch }}
            file dist/pingu-${{ matrix.os }}-${{ matrix.arch }} || true
            chmod +x dist/pingu-${{ matrix.os }}-${{ matrix.arch }}
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pingu-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/pingu-${{ matrix.os }}-${{ matrix.arch }}*
          retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: ls -la dist/

      - name: Generate checksums
        run: |
          cd dist
          sha256sum pingu-* > checksums.txt
          cat checksums.txt

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 Pingu ${{ steps.version.outputs.VERSION }}
          
          A modern ping utility with beautiful CLI output and comprehensive network analysis.
          
          ### 📦 Installation
          
          **Quick install for your platform:**
          ```bash
          curl -fsSL https://get.pingu.dev | sh
          ```
          
          **Platform-specific downloads:**
          
          #### macOS
          ```bash
          # Apple Silicon (M1/M2/M3/M4)
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pingu-darwin-arm64 -o pingu
          chmod +x pingu && sudo mv pingu /usr/local/bin/
          
          # Intel
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pingu-darwin-amd64 -o pingu
          chmod +x pingu && sudo mv pingu /usr/local/bin/
          ```
          
          #### Linux
          ```bash
          # x86_64
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pingu-linux-amd64 -o pingu
          chmod +x pingu && sudo mv pingu /usr/local/bin/
          
          # ARM64
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pingu-linux-arm64 -o pingu
          chmod +x pingu && sudo mv pingu /usr/local/bin/
          
          # ARM (32-bit)
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pingu-linux-arm -o pingu
          chmod +x pingu && sudo mv pingu /usr/local/bin/
          ```
          
          #### Windows
          ```powershell
          # x86_64
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pingu-windows-amd64.exe" -OutFile "pingu.exe"
          
          # ARM64
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pingu-windows-arm64.exe" -OutFile "pingu.exe"
          ```
          
          #### OpenBSD
          ```bash
          # x86_64
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pingu-openbsd-amd64 -o pingu
          chmod +x pingu && doas mv pingu /usr/local/bin/
          
          # ARM64
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pingu-openbsd-arm64 -o pingu
          chmod +x pingu && doas mv pingu /usr/local/bin/
          ```
          
          ### ✨ Features
          
          - 🎨 Beautiful terminal UI with responsive design
          - 📊 Real-time network monitoring and analysis
          - 🔍 Comprehensive quality metrics and performance scoring
          - 📱 Adaptive layouts for different terminal sizes
          - 🌐 Cross-platform support (Windows, macOS, Linux, OpenBSD)
          - 📁 Export functionality for detailed analysis
          - ⚡ Single binary with no dependencies
          
          ### 🐧 Usage
          
          ```bash
          # Basic ping
          pingu google.com
          
          # Ping with options
          pingu -c 10 --interval 2 --export 8.8.8.8
          ```
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.0.0...${{ steps.version.outputs.VERSION }}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: "Pingu ${{ steps.version.outputs.VERSION }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            dist/pingu-*
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
